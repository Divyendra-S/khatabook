import { supabase } from '@/lib/supabase/client';

export const organizationMutations = {
  /**
   * Create a new employee using Edge Function with service role key
   * This is the secure way to use service role key (server-side only)
   * Employee ID is auto-generated by database trigger
   */
  createEmployee: async (params: {
    email: string;
    password?: string; // Now optional, defaults to email
    fullName: string;
    phone?: string;
    department?: string;
    designation?: string;
    role?: 'employee' | 'hr';
    dateOfJoining?: string;
    organizationId: string;
    baseSalary?: number;
    workingDays?: string[];
    dailyWorkingHours?: number;
    bankName?: string;
    accountNumber?: string;
    ifscCode?: string;
    accountHolderName?: string;
    branchName?: string;
    aadhaarNumber?: string;
    dateOfBirth?: string;
  }) => {
    // Call Edge Function which uses service role key securely server-side
    const { data, error } = await supabase.functions.invoke('create-employee', {
      body: {
        email: params.email,
        password: params.password, // Optional, will default to email in Edge Function
        fullName: params.fullName,
        phone: params.phone,
        department: params.department,
        designation: params.designation,
        role: params.role || 'employee',
        dateOfJoining: params.dateOfJoining || new Date().toISOString().split('T')[0],
        organizationId: params.organizationId,
        baseSalary: params.baseSalary,
        workingDays: params.workingDays,
        dailyWorkingHours: params.dailyWorkingHours,
        bankName: params.bankName,
        accountNumber: params.accountNumber,
        ifscCode: params.ifscCode,
        accountHolderName: params.accountHolderName,
        branchName: params.branchName,
        aadhaarNumber: params.aadhaarNumber,
        dateOfBirth: params.dateOfBirth,
      },
    });

    if (error) throw error;
    if (!data?.success) throw new Error(data?.error || 'Failed to create employee');

    return data.data;
  },

  /**
   * Update employee details
   */
  updateEmployee: async (
    userId: string,
    updates: Partial<{
      full_name: string;
      phone: string;
      department: string;
      designation: string;
      role: 'employee' | 'hr' | 'admin';
      date_of_joining: string;
      is_active: boolean;
    }>
  ) => {
    const { data, error } = await supabase
      .from('users')
      .update(updates)
      .eq('id', userId)
      .select()
      .single();

    if (error) throw error;

    // Update role cache if role changed
    if (updates.role) {
      await supabase
        .from('user_role_cache')
        .upsert({
          user_id: userId,
          role: updates.role,
        });
    }

    return data;
  },

  /**
   * Deactivate an employee
   */
  deactivateEmployee: async (userId: string) => {
    const { data, error } = await supabase
      .from('users')
      .update({ is_active: false })
      .eq('id', userId)
      .select()
      .single();

    if (error) throw error;
    return data;
  },

  /**
   * Reactivate an employee
   */
  reactivateEmployee: async (userId: string) => {
    const { data, error } = await supabase
      .from('users')
      .update({ is_active: true })
      .eq('id', userId)
      .select()
      .single();

    if (error) throw error;
    return data;
  },

  /**
   * Update organization details
   */
  updateOrganization: async (
    organizationId: string,
    updates: Partial<{
      name: string;
      description: string;
      is_active: boolean;
    }>
  ) => {
    const { data, error } = await supabase
      .from('organizations')
      .update(updates)
      .eq('id', organizationId)
      .select()
      .single();

    if (error) throw error;
    return data;
  },
};
